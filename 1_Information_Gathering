---Passive Information Gathering---
+++Whois Enumeration
$ whois megacorpone.com -h 192.168.50.251
$ whois 38.100.193.70 -h 192.168.50.251

+++Google Hacking
In the example below, we combine operators to locate TXT files (filetype:txt) on www.megacorpone.com (site:megacorpone.com):
Search: site:megacorpone.com -filetype:html
In another example, we can use a search for intitle:"index of" "parent directory" to find pages that contain "index of" in the title and the words "parent directory" on the page.

+++Netcraft
Netcraft is an internet service company based in England offering a free web portal that performs various information gathering functions, such as discovering which technologies are running on a given website and finding which other hosts share the same IP netblock.

+++Open-Source Code

+++Shodan
Search:  hostname:megacorpone.com

+++Security Headers and SSL/TLS

+++LLM-Powered Passive Information Gathering
Passive LLM-Aided enumeration
-> ChatGPT: Can you print out all the public information about company structure and employees of megacorpone?
	    Can you provide the best 20 google dorks for megacorpone.com website tailored for a penetration test?
	    Retrieve the technology stack of the megacorpone.com website

---Active Information Gathering---
+++DNS Enumeration
-> NS: Nameserver records contain the name of the authoritative servers hosting the DNS records for a domain.
-> A: Also known as a host record, the "a record" contains the IPv4 address of a hostname (such as www.megacorpone.com).
-> AAAA: Also known as a quad A host record, the "aaaa record" contains the IPv6 address of a hostname (such as www.megacorpone.com).
-> MX: Mail Exchange records contain the names of the servers responsible for handling email for the domain. A domain can contain multiple MX records.
-> PTR: Pointer Records are used in reverse lookup zones and can find the records associated with an IP address.
-> CNAME: Canonical Name Records are used to create aliases for other host records.
-> TXT: Text records can contain any arbitrary data and be used for various purposes, such as domain ownership verification.

$ host www.megacorpone.com
-> www.megacorpone.com has address 149.56.244.87

$ host -t mx megacorpone.com
-> megacorpone.com mail is handled by 10 fb.mail.gandi.net.
megacorpone.com mail is handled by 20 spool.mail.gandi.net.
megacorpone.com mail is handled by 50 mail.megacorpone.com.
megacorpone.com mail is handled by 60 mail2.megacorpone.com.

$ host -t txt megacorpone.com
-> megacorpone.com descriptive text "Try Harder"
megacorpone.com descriptive text "google-site-verification=U7B_b0HNeBtY4qYGQZNsEYXfCJ32hMNV3GtC0wWq5pA"

$ host www.megacorpone.com
-> www.megacorpone.com has address 149.56.244.87 
Next, let's determine if megacorpone.com has a server with the hostname "idontexist". We'll observe the difference between the query outputs.
$ host idontexist.megacorpone.com
-> Host idontexist.megacorpone.com not found: 3(NXDOMAIN)

First, let's build a list of possible hostnames:

$ cat list.txt
www
ftp
mail
owa
proxy
router

$ for ip in $(cat list.txt); do host $ip.megacorpone.com; done
www.megacorpone.com has address 149.56.244.87
Host ftp.megacorpone.com not found: 3(NXDOMAIN)
mail.megacorpone.com has address 51.222.169.212
Host owa.megacorpone.com not found: 3(NXDOMAIN)
Host proxy.megacorpone.com not found: 3(NXDOMAIN)
router.megacorpone.com has address 51.222.169.214

Let's use a loop to scan IP addresses 51.222.169.200 through 51.222.169.254. We will filter out invalid results (using grep -v), showing only entries that do not contain "not found".
$ for ip in $(seq 200 254); do host 51.222.169.$ip; done | grep -v "not found"
...
208.169.222.51.in-addr.arpa domain name pointer admin.megacorpone.com.
209.169.222.51.in-addr.arpa domain name pointer beta.megacorpone.com.
210.169.222.51.in-addr.arpa domain name pointer fs1.megacorpone.com.
211.169.222.51.in-addr.arpa domain name pointer intranet.megacorpone.com.
212.169.222.51.in-addr.arpa domain name pointer mail.megacorpone.com.
213.169.222.51.in-addr.arpa domain name pointer mail2.megacorpone.com.
214.169.222.51.in-addr.arpa domain name pointer router.megacorpone.com.
215.169.222.51.in-addr.arpa domain name pointer siem.megacorpone.com.
216.169.222.51.in-addr.arpa domain name pointer snmp.megacorpone.com.
217.169.222.51.in-addr.arpa domain name pointer syslog.megacorpone.com.
218.169.222.51.in-addr.arpa domain name pointer support.megacorpone.com.
219.169.222.51.in-addr.arpa domain name pointer test.megacorpone.com.
220.169.222.51.in-addr.arpa domain name pointer vpn.megacorpone.com.

DNSRecon is an advanced DNS enumeration script written in Python. Let's run dnsrecon against megacorpone.com, using the -d option to specify a domain name and -t to specify the type of enumeration to perform (in this case, a standard scan).
$ dnsrecon -d megacorpone.com -t std
[*] std: Performing General Enumeration against: megacorpone.com...
[-] DNSSEC is not configured for megacorpone.com
[*] 	 SOA ns1.megacorpone.com 51.79.37.18
[*] 	 NS ns1.megacorpone.com 51.79.37.18
[*] 	 NS ns3.megacorpone.com 66.70.207.180
[*] 	 NS ns2.megacorpone.com 51.222.39.63
[*] 	 MX mail.megacorpone.com 51.222.169.212
[*] 	 MX spool.mail.gandi.net 217.70.178.1
[*] 	 MX fb.mail.gandi.net 217.70.178.217
[*] 	 MX fb.mail.gandi.net 217.70.178.216
[*] 	 MX fb.mail.gandi.net 217.70.178.215
[*] 	 MX mail2.megacorpone.com 51.222.169.213
[*] 	 TXT megacorpone.com Try Harder
[*] 	 TXT megacorpone.com google-site-verification=U7B_b0HNeBtY4qYGQZNsEYXfCJ32hMNV3GtC0wWq5pA
[*] Enumerating SRV Records
[+] 0 Records Found

Let's try to brute force additional hostnames using the list.txt file we created previously for forward lookups.
$ cat list.txt 
www
ftp
mail
owa
proxy
router

$ dnsrecon -d megacorpone.com -D ~/list.txt -t brt
[*] Using the dictionary file: /home/kali/list.txt (provided by user)
[*] brt: Performing host and subdomain brute force against megacorpone.com...
[+] 	 A www.megacorpone.com 149.56.244.87
[+] 	 A mail.megacorpone.com 51.222.169.212
[+] 	 A router.megacorpone.com 51.222.169.214
[+] 3 Records Found

$ dnsenum megacorpone.com
...
dnsenum VERSION:1.2.6

-----   megacorpone.com   -----

...

Brute forcing with /usr/share/dnsenum/dns.txt:
_______________________________________________

admin.megacorpone.com.                   5        IN    A        51.222.169.208
beta.megacorpone.com.                    5        IN    A        51.222.169.209
fs1.megacorpone.com.                     5        IN    A        51.222.169.210
intranet.megacorpone.com.                5        IN    A        51.222.169.211
mail.megacorpone.com.                    5        IN    A        51.222.169.212
mail2.megacorpone.com.                   5        IN    A        51.222.169.213
ns1.megacorpone.com.                     5        IN    A        51.79.37.18
ns2.megacorpone.com.                     5        IN    A        51.222.39.63
ns3.megacorpone.com.                     5        IN    A        66.70.207.180
router.megacorpone.com.                  5        IN    A        51.222.169.214
siem.megacorpone.com.                    5        IN    A        51.222.169.215
snmp.megacorpone.com.                    5        IN    A        51.222.169.216
syslog.megacorpone.com.                  5        IN    A        51.222.169.217
test.megacorpone.com.                    5        IN    A        51.222.169.219
vpn.megacorpone.com.                     5        IN    A        51.222.169.220
www.megacorpone.com.                     5        IN    A        149.56.244.87
www2.megacorpone.com.                    5        IN    A        149.56.244.87


megacorpone.com class C netranges:
___________________________________

 51.79.37.0/24
 51.222.39.0/24
 51.222.169.0/24
 66.70.207.0/24
 149.56.244.0/24


Performing reverse lookup on 1280 ip addresses:
________________________________________________

18.37.79.51.in-addr.arpa.                86400    IN    PTR      ns1.megacorpone.com.
...

>nslookup mail.megacorptwo.com
>nslookup -type=TXT info.megacorptwo.com 192.168.50.151

+++TCP/UDP Port Scanning Theory
We can demonstrate this by running a TCP Netcat port scan on ports 3388-3390. We'll use the -w option to specify the connection timeout in seconds, as well as -z to specify zero-I/O mode, which is used for scanning and sends no data.
$ nc -nvv -w 1 -z 192.168.50.152 3388-3390
(UNKNOWN) [192.168.50.152] 3390 (?) : Connection refused
(UNKNOWN) [192.168.50.152] 3389 (ms-wbt-server) open
(UNKNOWN) [192.168.50.152] 3388 (?) : Connection refused
 sent 0, rcvd 0

Let's run a UDP Netcat port scan against ports 120-123 on a different target. We'll use the only nc option we have not covered yet, -u, which indicates a UDP scan.
$ nc -nv -u -z -w 1 192.168.50.149 120-123
(UNKNOWN) [192.168.50.149] 123 (ntp) open

+++Port Scanning with Nmap
-> SYN scanning: sudo nmap -sS 192.168.50.149
-> TCP connect scan: nmap -sT 192.168.50.149
-> UDP scanning: sudo nmap -sU 192.168.50.149
-> sudo nmap -sU -sS 192.168.50.149
-> Network Sweeping (send ICMP): nmap -sn 192.168.50.1-253

Searching for live machines using the grep command on a standard nmap output can be cumbersome. Instead, let's use Nmap's "greppable" output parameter, -oG, to save these results in a more manageable format.
$ nmap -v -sn 192.168.50.1-253 -oG ping-sweep.txt
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-10 03:21 EST
Initiating Ping Scan at 03:21
...
Read data files from: /usr/bin/../share/nmap
Nmap done: 254 IP addresses (13 hosts up) scanned in 3.74 seconds
...

$ grep Up ping-sweep.txt | cut -d " " -f 2
192.168.50.6
192.168.50.8
192.168.50.9
...

$ nmap -p 80 192.168.50.1-253 -oG web-sweep.txt
Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-10 03:50 EST
Nmap scan report for 192.168.50.6
Host is up (0.11s latency).

PORT   STATE SERVICE
80/tcp open  http

Nmap scan report for 192.168.50.8
Host is up (0.11s latency).

PORT   STATE  SERVICE
80/tcp closed http
...

$ grep open web-sweep.txt | cut -d" " -f2
192.168.50.6
192.168.50.20
192.168.50.21

-> Top 20 port: nmap -sT -A --top-ports=20 192.168.50.1-253 -oG top-port-sweep.txt
-> Nmap port service name: cat /usr/share/nmap/nmap-services
-> OS fingerprint scan: sudo nmap -O 192.168.50.14 --osscan-guess
-> OS and service enum (-A): nmap -sT -A 192.168.50.14

NSE scripts are in the /usr/share/nmap/scripts directory.
-> nmap --script http-headers 192.168.50.6
-> View script info: nmap --script-help http-headers

WINDOW:
->PS: Test-NetConnection -Port 445 192.168.50.151
->PS: 1..1024 | % {echo ((New-Object Net.Sockets.TcpClient).Connect("192.168.50.151", $_)) "TCP port $_ is open"} 2>$null

+++SMB Enumeration
-> nmap -v -p 139,445 -oG smb.txt 192.168.50.1-254
-> sudo nbtscan -r 192.168.50.0/24
-> nmap -v -p 139,445 --script smb-os-discovery 192.168.50.152
-> WINDOW-cmd: net view \\dc01 /all

+++SMTP Enumeration
-> nc -nv 192.168.50.8 25
PYTHON:
#!/usr/bin/python

import socket
import sys

if len(sys.argv) != 3:
        print("Usage: vrfy.py <username> <target_ip>")
        sys.exit(0)

# Create a Socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect to the Server
ip = sys.argv[2]
connect = s.connect((ip,25))

# Receive the banner
banner = s.recv(1024)

print(banner)

# VRFY a user
user = (sys.argv[1]).encode()
s.send(b'VRFY ' + user + b'\r\n')
result = s.recv(1024)

print(result)

# Close the socket
s.close()

-> python3 smtp.py root 192.168.50.8
-> python3 smtp.py johndoe 192.168.50.8
-> WINDOW-ps: Test-NetConnection -Port 25 192.168.50.8
Unfortunately, with Test-NetConnection we are prevented from fully interacting with the SMTP service. Nevertheless, if not already enabled, we can install the Microsoft version of the Telnet client, as shown:
-> WINDOW-ps: dism /online /Enable-Feature /FeatureName:TelnetClient
-> WINDOW-cmd: telnet 192.168.50.8 25

+++SNMP Enumeration
For example, the following MIB values correspond to specific Microsoft Windows SNMP parameters and contain much more than network-based information:

1.3.6.1.2.1.25.1.6.0	System Processes
1.3.6.1.2.1.25.4.2.1.2	Running Programs
1.3.6.1.2.1.25.4.2.1.4	Processes Path
1.3.6.1.2.1.25.2.3.1.4	Storage Units
1.3.6.1.2.1.25.6.3.1.2	Software Name
1.3.6.1.4.1.77.1.2.25	User Accounts
1.3.6.1.2.1.6.13.1.3	TCP Local Ports

To scan for open SNMP ports, we can run nmap, using the -sU option to perform UDP scanning and the --open option to limit the output and display only open ports.
-> sudo nmap -sU --open -p 161 192.168.50.1-254 -oG open-snmp.txt

Alternatively, we can use a tool such as onesixtyone, which will attempt a brute force attack against a list of IP addresses. First, we must build text files containing community strings and the IP addresses we wish to scan.
$ echo public > community
$ echo private >> community
$ echo manager >> community

$ for ip in $(seq 1 254); do echo 192.168.50.$ip; done > ips

$ onesixtyone -c community -i ips
Scanning 254 hosts, 3 communities
192.168.50.151 [public] Hardware: Intel64 Family 6 Model 79 Stepping 1 AT/AT COMPATIBLE - Software: Windows Version 6.3 (Build 17763 Multiprocessor Free)
...

This command enumerates the entire MIB tree using the -c option to specify the community string, and -v to specify the SNMP version number, as well as the -t 10 option to increase the timeout period to 10 seconds:
$ snmpwalk -c public -v1 -t 10 192.168.50.151
$ snmpwalk -c public -v1 192.168.50.151 1.3.6.1.4.1.77.1.2.25
$ snmpwalk -c public -v1 192.168.50.151 1.3.6.1.2.1.25.4.2.1.2

---LLM-Powered Active Information Gathering---
ChatGPT
